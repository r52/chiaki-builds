name: Build Chiaki (VC Qt6)

on:
  workflow_dispatch:
  workflow_call:

jobs:
  build-win_x64: # only win_x64 so far :)
    name: Build Chiaki win_x64 (VC)
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Apply Patches
        shell: bash
        run: |
          git apply --ignore-whitespace --directory=chiaki/ patches/*.patch

      - name: Setup ffmpeg
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-n6.0-latest-win64-gpl-shared-6.0.zip" -OutFile ".\ffmpeg.zip"
          Expand-Archive -LiteralPath "ffmpeg.zip" -DestinationPath "."
          Rename-Item "ffmpeg-n6.0-latest-win64-gpl-shared-6.0" "ffmpeg"
          Write-Output "${{ github.workspace }}\ffmpeg\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup protoc
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v23.3/protoc-23.3-win64.zip" -OutFile ".\protobuf.zip"
          Expand-Archive -LiteralPath ".\protobuf.zip" -DestinationPath ".\protobuf"
          Write-Output "${{ github.workspace }}\protobuf\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup OpenSSL
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://download.firedaemon.com/FireDaemon-OpenSSL/openssl-1.1.1u.zip" -OutFile ".\openssl.zip"
          Expand-Archive -LiteralPath "openssl.zip" -DestinationPath "."
          Rename-Item "openssl-1.1" "openssl"
          Write-Output "${{ github.workspace }}\openssl" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup SDL2
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://github.com/libsdl-org/SDL/releases/download/release-2.26.5/SDL2-devel-2.26.5-VC.zip" -OutFile ".\SDL2-devel-VC.zip"
          Expand-Archive -LiteralPath "SDL2-devel-VC.zip" -DestinationPath "."
          Rename-Item "SDL2-2.26.5" "SDL2"
          Write-Output "SDL2_DIR=${{ github.workspace }}\SDL2" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x64"

      - name: Install pip dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade setuptools wheel
          python3 -m pip install --user --upgrade scons protobuf grpcio-tools pyinstaller
          python3 -c 'import google.protobuf; print(google.protobuf.__file__)'

      - name: Setup Qt
        uses: jurplel/install-qt-action@v3
        with:
          aqtversion: "==3.1.*"
          version: "6.5.1"
          host: "windows"
          target: "desktop"
          arch: "win64_msvc2019_64"
          modules: "qtmultimedia"
          cache: "true"

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure & Build Opus
        working-directory: opus
        run: |
          cmake `
          -S . `
          -B build `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\opus-bin"
          cmake --build build --config Release
          cmake --install build

      - name: Configure Chiaki
        working-directory: chiaki
        run: |
          cmake `
          -S . `
          -B build `
          -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_C_FLAGS="-we4013" `
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE `
          -DCMAKE_BUILD_TYPE=RelWithDebInfo `
          -DCHIAKI_ENABLE_CLI=OFF `
          -DCHIAKI_GUI_ENABLE_SDL_GAMECONTROLLER=ON `
          -DPYTHON_EXECUTABLE="${{ env.pythonLocation }}\python.exe" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}\nanopb;${{ github.workspace }}\ffmpeg;${{ github.workspace }}\opus-bin;${{ github.workspace }}\openssl\x64;${{ github.workspace }}\SDL2;${{ env.Qt6_Dir }}"

      - name: Build Chiaki
        working-directory: chiaki
        run: |
          cmake --build build --config Release --clean-first --target chiaki

      - name: Prepare Qt deployment package
        working-directory: chiaki
        run: |
          mkdir Chiaki-Qt6
          cp build\gui\Release\chiaki.exe Chiaki-Qt6
          cp "${{ github.workspace }}\openssl\x64\bin\libcrypto-1_1-x64.dll" Chiaki-Qt6
          cp "${{ github.workspace }}\openssl\x64\bin\libssl-1_1-x64.dll" Chiaki-Qt6
          cp "${{ github.workspace }}\SDL2\lib\x64\SDL2.dll" Chiaki-Qt6
          cp "${{ github.workspace }}\ffmpeg\bin\swresample-4.dll" Chiaki-Qt6
          cp "${{ github.workspace }}\ffmpeg\bin\avcodec-60.dll" Chiaki-Qt6
          cp "${{ github.workspace }}\ffmpeg\bin\avutil-58.dll" Chiaki-Qt6
          windeployqt.exe --no-translations Chiaki-Qt6\chiaki.exe

      - name: Package Chiaki
        working-directory: chiaki
        run: |
          $CHIAKI_VERSION_MAJOR = (Select-String -Path .\CMakeLists.txt -Pattern 'set\(CHIAKI_VERSION_MAJOR ([0-9]+)\)') | %{$_.Matches.Groups[1].value}
          $CHIAKI_VERSION_MINOR = (Select-String -Path .\CMakeLists.txt -Pattern 'set\(CHIAKI_VERSION_MINOR ([0-9]+)\)') | %{$_.Matches.Groups[1].value}
          $CHIAKI_VERSION_PATCH = (Select-String -Path .\CMakeLists.txt -Pattern 'set\(CHIAKI_VERSION_PATCH ([0-9]+)\)') | %{$_.Matches.Groups[1].value}
          $RELEASE_PACKAGE_FILE = "Chiaki-win_x64-Qt6-$CHIAKI_VERSION_MAJOR.$CHIAKI_VERSION_MINOR.$CHIAKI_VERSION_PATCH.zip"
          Compress-Archive Chiaki-Qt6 $RELEASE_PACKAGE_FILE
          $release_filepath = Get-ChildItem $RELEASE_PACKAGE_FILE | %{$_[0].FullName}
          echo "RELEASE_PACKAGE_PATH=$release_filepath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Chiaki Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Chiaki-win_x64-Qt6-Release
          path: ${{ env.RELEASE_PACKAGE_PATH }}
          if-no-files-found: error
          retention-days: 1
