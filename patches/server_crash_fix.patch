diff --git a/lib/src/streamconnection.c b/lib/src/streamconnection.c
index 7187c1b..28d079b 100644
--- a/lib/src/streamconnection.c
+++ b/lib/src/streamconnection.c
@@ -58,6 +58,15 @@ static ChiakiErrorCode stream_connection_send_streaminfo_ack(ChiakiStreamConnect
 static void stream_connection_takion_av(ChiakiStreamConnection *stream_connection, ChiakiTakionAVPacket *packet);
 static ChiakiErrorCode stream_connection_send_heartbeat(ChiakiStreamConnection *stream_connection);
 
+static void _stream_connection_sleep(int ms)
+{
+#ifdef _WIN32
+	Sleep(ms);
+#else
+	usleep(ms * 1000);
+#endif
+}
+
 CHIAKI_EXPORT ChiakiErrorCode chiaki_stream_connection_init(ChiakiStreamConnection *stream_connection, ChiakiSession *session)
 {
 	stream_connection->session = session;
@@ -622,6 +631,17 @@ static void stream_connection_takion_data_expect_bang(ChiakiStreamConnection *st
 	// stream_connection->state_mutex is expected to be locked by the caller of this function
 	stream_connection->state_finished = true;
 	chiaki_cond_signal(&stream_connection->state_cond);
+
+	// THEORY: Sending the controller connection packets too fast after receiving bang
+	// seems to crash the remote play server. When this happens, it is symptomized by 
+	// an ack packet with an invalid GMAC being received from the server before it
+	// hangs/crashes, implying that there is a bug between its crypt initialization and
+	// controller packet handling code. Since this is very difficult to reproduce in a 
+	// debug build with no optimizations with no other configuration or variables changed,
+	// it implies that simply waiting for a small amount of time before sending the
+	// controller connection packets will work around the issue.
+	_stream_connection_sleep(100);
+
 	err = stream_connection_send_controller_connection(stream_connection);
 	if(err != CHIAKI_ERR_SUCCESS)
 	{
